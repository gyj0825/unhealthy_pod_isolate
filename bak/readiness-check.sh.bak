#/bin/bash

SECRET_PATH='/var/run/secrets/kubernetes.io/serviceaccount'
CA_FILE=${SECRET_PATH}/ca.crt
TOKEN_FILE=${SECRET_PATH}/token
NAMESPACE_FILE=${SECRET_PATH}/namespace
MASTER_URL='https://kubernetes.default.svc.cluster.local'

function find_env() {
  var=`printenv "$1"`

  # If environment variable exists
  if [ -n "$var" ]; then
    echo $var
  else
    echo $2
  fi
}

pod_name=$(find_env "POD_NAME")
selector_label=$(find_env "SELECTOR_LABEL" "deploymentConfig")
namespace=`cat $NAMESPACE_FILE`
token=`cat $TOKEN_FILE`
flag=0

function check_status() { 
   curl -s  http://localhost:8080//echo-web-0.0.1-SNAPSHOT/ | grep -iq 'hello word'
   if [ $? == 0 ];then
      echo "app is healthy"
      exit 0
   else 
      echo "app is unhealthy"
      flag=1
      count=`cat /tmp/count`
      count=$(($count + 1))
      echo $count > /tmp/count
   fi
}
function get_pod_info() {
  curl -s --cacert $CA_FILE -H "Authorization: Bearer $token" -H "Content-type:application/json" ${MASTER_URL}/api/v1/namespaces/${namespace}/pods/${pod_name} > /tmp/${pod_name}.info.json
}
function change_pod_info(){
  content=`cat /tmp/${pod_name}.info.json | grep -n $selector_label`
  tag=`echo $content | grep ','`
  if [ -n $tag ];then
    echo "tag is null,need operation"
    line_num=`echo $content | cut -d ':' -f 1`
    sed -i "/$selector_label/d" /tmp/${pod_name}.info.json
    sed -i $(($line_num - 1))'s/,//' /tmp/${pod_name}.info.json
  else
    sed -i "/$selector_label/d" /tmp/${pod_name}.info.json
  fi
}
function update_pod_info(){
  curl -XPUT  --cacert $CA_FILE -H "Authorization: Bearer $token" -H "Content-type:application/json" ${MASTER_URL}/api/v1/namespaces/${namespace}/pods/${pod_name} --data  "@/tmp/${pod_name}.info.json"
}

function check_probe_state() {
  status=`cat /tmp/${pod_name}.info.json | grep '\"ready\":'`
  ready=`echo $status | cut  -d ' ' -f 2 | cut -d ',' -f 1`
}

if [ ! -n "POD_NAME" ];then
   echo "Not define POD_NAME"
   exit 217
fi

check_status
if [ "$flag" == "1" ];then
  get_pod_info
  check_probe_state
  if [ "$ready" == "false" ];then
    echo 0 > /tmp/count
  fi
  id=`cat /tmp/count`
  failureThreshold=`cat /tmp/${pod_name}.info.json | grep failureThreshold | cut -d ':' -f 2 | cut -d ' ' -f 2`
  retry_times=$(($failureThreshold - 1))
  if [ "$id" == "$retry_times" ];then  
    get_pod_info
    check_probe_state
    if [ "$ready" == "true" ];then
       change_pod_info
       update_pod_info
    fi
    echo 0 > /tmp/count
  fi
  exit 1
fi
